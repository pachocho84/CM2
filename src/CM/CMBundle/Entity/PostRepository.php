<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'after' => null,
            'exclude' => array(),
            'userId' => null,
            'pageId' => null,
            'groupId' => null,
            'paginate' => true,
            'limit' => 25
        ), $options);
    }

    public function getEntity($entityId)
    {
        return $this->createQueryBuilder('p')
            ->select('p, e')
            ->leftJoin('p.entity', 'e')
            ->where('e.id = :id')->setParameter('id', $entityId)
            ->getQuery()->getSingleResult();
    }

    public function getLastPosts(array $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('p')
            ->select('p, e, t, c, i, eu, ep, epl, epc, eplu, epcu')
            ->leftJoin('p.entity', 'e')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.entityCategory', 'c')
            ->leftJoin('e.images', 'i', 'WITH', 'i.main = '.true)
            ->leftJoin('e.entityUsers', 'eu', 'WITH', 'eu.status = '.EntityUser::STATUS_ACTIVE)
            ->leftJoin('e.posts', 'ep', 'WITH', 'ep.type = '.Post::TYPE_CREATION)
            ->leftJoin('ep.likes', 'epl')
            ->leftJoin('ep.comments', 'epc')
            ->leftJoin('epl.user', 'eplu')
            ->leftJoin('epc.user', 'epcu');
        if (!is_null($options['after'])) {
            $query->andWhere('p.id > :after_id')->setParameter('after_id', $options['after']);
        }
        if (!empty($options['exclude'])) {
            $query->leftJoin('p.user', 'u')
                ->leftJoin('p.creator', 'cr')
                ->andWhere('u.id NOT IN (:exclude)')
                ->andWhere('cr.id NOT IN (:exclude)')
                ->setParameter('exclude', implode(',', $options['exclude']));
        }
        if (!is_null($options['userId'])) {
            $query->andWhere('eu.userId = :user_id')->setParameter('user_id', $options['userId']);
        }
        if (!is_null($options['pageId'])) {
            $query->leftJoin('eu.user', 'euu')
                ->leftJoin('euu.userPages', 'up')
                ->andWhere('up.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['groupId'])) {
            $query->leftJoin('eu.user', 'euu')
                ->leftJoin('euu.userPages', 'ug')
                ->andWhere('ug.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        $query->orderBy('p.updatedAt', 'desc');
        if (!is_null($options['limit'])) {
            $query->setMaxResults($options['limit']);
        }

        return $options['paginate'] ? $query->getQuery() : $query->getQuery()->getResult();
    }

    // static public function getLastPosts($options = array())
    // {
    //     $options = self::getOptions($options);
        
    //     $query = PostQuery::create()->
    //         init()->
    //         _if($options['user_id'])->
    //             leftJoin('Post.Protagonist')->
    //             condition('owner', 'Post.UserId = ?', $options['user_id'])->
    //             condition('protagonist_user', 'Protagonist.UserId = ?', $options['user_id'])->
    //         condition('protagonist_active', 'Protagonist.Status = ?', 'active')->
    //         combine(array('protagonist_user', 'protagonist_active'), 'and', 'protagonist')->
    //         where(array('owner', 'protagonist'), 'or')->
    //         _endIf()->
    //         groupBy('Post.Id')->
    //         orderByUpdatedAt('desc');
            
    //     return $options['paginate'] ? $query->paginate(sfContext::getInstance()->getRequest()->getParameter('page', 1), $options['per_page']) : $query->limit($options['limit'])->find();
            
    // }

    public function delete($creatorId, $userId, $object, $objectIds, $entityId = null)
    {
        $query = $this->createQueryBuilder('p')
            ->delete('CMBundle:Post', 'p')
            ->where('p.creator = :creator_id')->setParameter('creator_id', $creatorId)
            ->andWhere('p.user = :user_id')->setParameter('user_id', $userId)
            ->andWhere('p.object = :object')->setParameter('object', $object);
        if (!is_null($entityId)) {
            $query->andWhere('p.entity = :entity_id')->setParameter('entity_id', $entityId);
        } else {
            $query->andWhere('p.objectIds = :object_ids')->setParameter('object_ids', $objectIds);
        }
        // TODO: make it usable for images
        $query->getQuery()->execute();
    }
}
