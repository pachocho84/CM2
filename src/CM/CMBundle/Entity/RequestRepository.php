<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'paginate'      => true,
            'limit'         => 25,
            'userId' => null,
            'fromUserId' => null,
            'exclude' => false,
            'entityId' => null,
            'groupId' => null,
            'pageId' => null,
            'object' => null,
            'indexBy' => null
        ), $options);
    }

    public function getFor($userId, $object, $objectId)
    {
        return $this->createQueryBuilder('r')
            ->where('r.userId = :user_id')->setParameter('user_id', $userId)
            ->andWhere('r.object = :object')->setParameter('object', $object)
            ->andWhere('r.objectId = :objectId')->setParameter('objectId', $objectId)
            ->getQuery()->getResult();
    }

    public function getRequestsFor($user1Id, $user2Id, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from($this->_entityName, 'r', is_null($options['indexBy']) ? null : 'r.'.$options['indexBy']);
        $query->andWhere($query->expr()->orX(
                $query->expr()->andX(
                    $query->expr()->eq('r.userId', ':user_1_id'),
                    $query->expr()->eq('r.fromUserId', ':user_2_id')
                ),
                $query->expr()->andX(
                    $query->expr()->eq('r.userId', ':user_2_id'),
                    $query->expr()->eq('r.fromUserId', ':user_1_id')
                )
            ))->setParameter('user_1_id', $user1Id)->setParameter('user_2_id', $user2Id);
        if (!is_null($options['object'])) {
            $query->andWhere('r.object = :object')->setParameter('object', $options['object']);
        }
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('r.pageIid = :page_id')->setParameter('page_id', $options['pageId']);
        }

        return $query->getQuery()->getResult();
    }

    public function getRequestFor($userId, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('r')
            ->select('r');
        $query->andWhere($query->expr()->orX(
                $query->expr()->eq('r.userId', ':user_id'),
                $query->expr()->eq('r.fromUserId', ':user_id')
            ))->setParameter('user_id', $userId);;
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('r.pageIid = :page_id')->setParameter('page_id', $options['pageId']);
        }

        $request = $query->setMaxResults(1)->getQuery()->getResult();
        if (is_array($request) && count($request) > 0) {
            $request = $request[0];
        } else {
            $request = null;
        }
        return $request;
    }

    public function getRequest($id)
    {
        return $this->createQueryBuilder('r')
            ->select('r, e, eu, g, gu, p, pu')
            ->where('r.id = :id')->setParameter('id', $id)
            ->leftJoin('r.entity', 'e')
            ->leftJoin('e.entityUsers', 'eu', '', '', 'eu.userId')
            ->leftJoin('r.group', 'g')
            ->leftJoin('g.groupUsers', 'gu', '', '', 'gu.userId')
            ->leftJoin('r.page', 'p')
            ->leftJoin('p.pageUsers', 'pu', '', '', 'pu.userId')
            ->getQuery()->getSingleResult();
    }

    public function getRequests($userId, $direction = 'incoming', array $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('r')
            ->select('r, u, e, eu, t, g, gu, p, pu, po, pou, pop, pog')
            ->leftJoin('r.entity', 'e')
            ->leftJoin('e.entityUsers', 'eu', 'WITH', 'eu.userId = :user_id', 'eu.userId')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.posts', 'po', 'WITH', 'po.type = '.Post::TYPE_CREATION)
            ->leftJoin('r.group', 'g')
            ->leftJoin('g.groupUsers', 'gu', 'WITH', 'gu.userId = :user_id', 'gu.userId')
            ->leftJoin('r.page', 'p')
            ->leftJoin('p.pageUsers', 'pu', 'WITH', 'pu.userId = :user_id', 'pu.userId')
            ->leftJoin('po.user', 'pou')
            ->leftJoin('po.group', 'pog')
            ->leftJoin('po.page', 'pop');
        if ($direction == 'incoming') {
            $query->leftJoin('r.user', 'u');
        } elseif ($direction == 'outgoing') {
            $query->leftJoin('r.fromUser', 'u');
        }
        $query->andWhere('u.id = :user_id')->setParameter('user_id', $userId)
            ->andWhere('r.status NOT IN ('.Request::STATUS_ACCEPTED.','.Request::STATUS_REFUSED.')')
            ->orderBy('r.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery() : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getRequestWithUserStatus($userId, $direction = 'incoming', array $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('r')
            ->select('r');
        if (!is_null($options['entityId'])) {
            $query->addSelect('e, eu')
                ->leftJoin('r.entity', 'e')
                ->leftJoin('e.entityUsers', 'eu', 'WITH', 'eu.userId = :user_id', 'eu.userId')
                ->andWhere('e.id = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->addSelect('g, gu')
                ->leftJoin('r.group', 'g')
                ->leftJoin('g.groupUsers', 'gu', 'WITH', 'gu.userId = :user_id', 'gu.userId')
                ->andWhere('g.id = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['pageId'])) {
            $query->addSelect('p, pu')
                ->leftJoin('r.page', 'p')
                ->leftJoin('p.pageUsers', 'pu', 'WITH', 'pu.userId = :user_id', 'pu.userId')
                ->andWhere('p.id = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if ($direction == 'incoming') {
            $query->andWhere('r.userId = :user_id');
        } elseif ($direction == 'outgoing') {
            $query->andWhere('r.fromUserId = :user_id');
        } elseif ($direction == 'any') {
            $query->andWhere($query->expr()->orX(
                $query->expr()->eq('r.userId', ':user_id'),
                $query->expr()->eq('r.fromUserId', ':user_id')
            ));    
        }
        $query->setParameter('user_id', $userId);

        $request = $query->setMaxResults(1)->getQuery()->getResult();
        if (is_array($request) && count($request) > 0) {
            $request = $request[0];
        } else {
            $request = null;
        }
        return $request;
    }

    public function getNumberNew($userId)
    {
        return $this->createQueryBuilder('r')
            ->select('count(r.id)')
            ->where('r.userId = :id')->setParameter('id', $userId)
            ->andWhere('r.status = :new')->setParameter('new', Request::STATUS_NEW)
            ->getQuery()->getSingleScalarResult();
    }

    public function updateStatus($userId, $options = array(), $oldStatus = null, $newStatus = Request::STATUS_PENDING)
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('r')
            ->update('CMBundle:Request', 'r')
            ->where('r.user = :user_id')->setParameter('user_id', $userId);
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('r.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['object'])) {
            $query->andWhere('r.object = :object')->setParameter('object', $options['object'])
                ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
        }
        if (!is_null($oldStatus)) {
            $query->andWhere('r.status = '.$oldStatus);
        }
        $query->set('r.status', $newStatus)
            ->getQuery()
            ->execute();

        if ($newStatus == Request::STATUS_ACCEPTED || $newStatus == Request::STATUS_REFUSED) {
            $request = $this->createQueryBuilder('r')
                ->select('r')
                ->where('r.user = :user_id')->setParameter('user_id', $userId);
            if (!is_null($options['entityId'])) {
                $request->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
            }
            if (!is_null($options['groupId'])) {
                $request->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
            }
            if (!is_null($options['pageId'])) {
                $request->andWhere('r.pageId = :page_id')->setParameter('page_id', $options['pageId']);
            }
            if (!is_null($options['object'])) {
                $request->andWhere('r.object = :object')->setParameter('object', $options['object'])
                    ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
            }

            return $request->getQuery()->getSingleResult();
        }
    }

    public function delete($userId, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('r')
            ->delete('CMBundle:Request', 'r');
        if ($options['exclude']) {
            $query->andWhere('r.userId != :user_id')->setParameter('user_id', $userId);
        } elseif (!is_null($userId)) {
            $query->andWhere('r.userId = :user_id')->setParameter('user_id', $userId);
        }
        if (!is_null($options['fromUserId'])) {
            $query->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $options['fromUserId']);
        }
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('r.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['object'])) {
            $query->andWhere('r.object = :object')->setParameter('object', $options['object'])
                ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
        }
        $query->getQuery()->execute();
    }
}
