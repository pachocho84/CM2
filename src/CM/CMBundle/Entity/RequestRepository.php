<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'paginate'      => true,
            'limit'         => 25,
            'entityId' => null,
            'groupId' => null,
            'object' => null,
            'exclude' => false
        ), $options);
    }

    public function getFor($userId, $object, $objectId)
    {
        return $this->createQueryBuilder('r')
            ->select('r')
            ->where('r.userId = :user_id')->setParameter('user_id', $userId)
            ->andWhere('r.object = :object')->setParameter('object', $object)
            ->andWhere('r.objectId = :objectId')->setParameter('objectId', $objectId)
            ->getQuery()->getResult();
    }

    public function getRequests($userId, $direction = 'incoming', array $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('r')
            ->select('r, u, e, t, p, pu, pp, pg')
            ->leftJoin('r.entity', 'e')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.posts', 'p', 'WITH', 'p.type = '.Post::TYPE_CREATION)
            ->leftJoin('p.user', 'pu')
            ->leftJoin('p.page', 'pp')
            ->leftJoin('p.group', 'pg');
        if ($direction == 'incoming') {
            $query->leftJoin('r.user', 'u');
        } elseif ($direction == 'outgoing') {
            $query->leftJoin('r.fromUser', 'u');
        }
        $query->andWhere('u.id = :id')->setParameter('id', $userId)
            ->andWhere('r.status NOT IN ('.Request::STATUS_ACCEPTED.','.Request::STATUS_REFUSED.')')
            ->orderBy('r.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery() : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getNumberNew($userId)
    {
        return $this->createQueryBuilder('r')
            ->select('count(r.id)')
            ->where('r.userId = :id')->setParameter('id', $userId)
            ->andWhere('r.status = :new')->setParameter('new', Request::STATUS_NEW)
            ->getQuery()->getSingleScalarResult();
    }

    public function updateStatus($userId, $options = array(), $oldStatus = null, $newStatus = Request::STATUS_PENDING)
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('r')
            ->update('CMBundle:Request', 'r')
            ->where('r.user = :user_id')->setParameter('user_id', $userId);
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['object'])) {
            $query->andWhere('r.object = :object')->setParameter('object', $options['object'])
                ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
        }
        if (!is_null($oldStatus)) {
            $query->andWhere('r.status = '.$oldStatus);
        }
        $query->set('r.status', $newStatus)
            ->getQuery()
            ->execute();

        if ($newStatus == Request::STATUS_ACCEPTED || $newStatus == Request::STATUS_REFUSED) {
            $request = $this->createQueryBuilder('r')
                ->select('r')
                ->where('r.user = :user_id')->setParameter('user_id', $userId);
            if (!is_null($options['entityId'])) {
                $request->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
            }
            if (!is_null($options['groupId'])) {
                
                $request->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
            }
            if (!is_null($options['object'])) {
                $request->andWhere('r.object = :object')->setParameter('object', $options['object'])
                    ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
            }

            return $request->getQuery()->getSingleResult();
        }
    }

    public function delete($userId, $options = array(), $received = true)
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('r')
            ->delete('CMBundle:Request', 'r');
        if ($received) {
            $query->where('r.user = :user_id')->setParameter('user_id', $userId);
        }
        if ($options['exclude']) {
            $query->andWhere('r.user != :exclude')->setParameter('exclude', $userId);
        }
        if (!is_null($options['entityId'])) {
            $query->andWhere('r.entityId = :entity_id')->setParameter('entity_id', $options['entityId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('r.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        if (!is_null($options['object'])) {
            $query->andWhere('r.object = :object')->setParameter('object', $options['object'])
                ->andWhere('r.objectId = :object_id')->setParameter('object_id', $options['objectId']);
        }
        $query->getQuery()->execute();
    }
}
