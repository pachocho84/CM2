<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        $options = array_merge(array(
            'locale'        => 'en'
        ), $options);
        
        return array_merge(array(
            'exclude'       => null,
            'userId'       => null,
            'groupId'      => null,
            'pageId'       => null,
            'archive'       => null, 
            'categoryId'   => null,
            'currentUserId' => null,
            'mainImageOnly' => false,
            'paginate'      => true,
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
            'protagonists'  => false,
            'limit'         => 25,
        ), $options);
    }
    
    public function getEvents(array $options = array())
    {
        $options = self::getOptions($options);

        $parameters = array(
            'now' => new \DateTime,
        );
        
        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(d.id)')
            ->from('CMBundle:EventDate','d')
            ->join('d.event', 'e')
            ->join('e.post', 'p');
                    
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t, ec, ect, i, p, l, c, u, lu, cu, pg, gr')
            ->from('CMBundle:EventDate','d')
            ->join('d.event', 'e')
            ->leftJoin('e.translations', 't', 'with', 't.locale IN (:locales)')
            ->leftJoin('e.category', 'ec')
            ->leftJoin('ec.translations', 'ect', 'with', 'ect.locale = :locale')
            ->leftJoin('e.image', 'i')
            ->innerJoin('e.post', 'p')
            ->leftJoin('e.entityUsers', 'eu', '', '', 'eu.userId')
            ->leftJoin('eu.user', 'us')
            ->leftJoin('p.likes', 'l')
            ->leftJoin('p.comments', 'c')
            ->leftJoin('p.user', 'u')
            ->leftJoin('l.user', 'lu')
            ->leftJoin('c.user', 'cu')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr');
            
        if ($options['protagonists']) {
            $query->addSelect('eu, us');
        }
        
        if ($options['userId']) {
            $count->andWhere('p.user = :user_id');
            $query->andWhere('p.user = :user_id');
            $parameters['user_id'] = $options['userId'];
        }
        
        if ($options['pageId']) {
            $count->andWhere('p.page = :page_id');
            $query->andWhere('p.page = :page_id');
            $parameters['page_id'] = $options['pageId'];
        }
        
        if ($options['groupId']) {
            $count->andWhere('p.group = :group_id');
            $query->andWhere('p.group = :group_id');
            $parameters['group_id'] = $options['groupId'];
        }
        
        if ($options['categoryId']) {
            $count->andWhere('e.category = :category_id');
            $query->andWhere('e.category = :category_id');
            $parameters['category_id'] = $options['categoryId'];
        }
        
        if ($options['archive']) {
            $count->andWhere('d.start <= :now');
            $query->andWhere('d.start <= :now')
                ->orderBy('d.start', 'desc');    
        } else {
            $count->andWhere('d.start >= :now');
            $query->andWhere('d.start >= :now')
                ->orderBy('d.start');    
        }
        
        $count->setParameters($parameters);
        $parameters['locale'] = $options['locale'];
        $parameters['locales'] = $options['locales'];
        $query->setParameters($parameters);
        
        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }
    
    public function getEventsPerMonth($year, $month, array $options = array())
    {
        $options = self::getOptions($options);
        
        return $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t')
            ->from('CMBundle:EventDate','d')
            ->join('d.event', 'e')
            ->leftJoin('e.translations', 't')
            ->where('SUBSTRING(d.start, 1, 4) = '.$year)
            ->andWhere('SUBSTRING(d.start, 6, 2) = '.$month)
            ->andWhere('t.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->orderBy('d.start')
            ->getQuery()
            ->getResult();
    }

    public function getEventJoined($id, array $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('e')
            ->select('e, t, ec, ect, d, i, p, l, c, u, lu, cu, pg, gr, eu, us')
            ->leftJoin('e.eventDates', 'd')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.category', 'ec')
            ->leftJoin('ec.translations', 'ect')
            ->leftJoin('e.image', 'i');
        if ($options['mainImageOnly']) {
            $query->andHaving('i.main = '.true);
        }
        return $query->leftJoin('e.post', 'p')
            ->leftJoin('p.likes', 'l')
            ->leftJoin('p.comments', 'c')
            ->leftJoin('p.user', 'u')
            ->leftJoin('l.user', 'lu')
            ->leftJoin('c.user', 'cu')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr')
            ->leftJoin('e.entityUsers', 'eu')
            ->leftJoin('eu.user', 'us')
            ->andWhere('e.id = :id')->setParameter('id', $id)
            ->andWhere('t.locale IN (:locales)')
            ->andWhere('ect.locale IN (:locales)')
            ->setParameter('locales', $options['locales'])
            ->orderBy('d.start', 'asc')
            ->getQuery()->getSingleResult();
    }
    
    public function getEvent($id, array $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('e')
            ->select('e, t, ec, ect, i, p, pl, plu, pc, pcu, u, pg, gr')
            ->join('e.translations', 't', 'with', 't.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->join('e.category', 'ec')
            ->join('ec.translations', 'ect', 'with', 'ect.locale = :locale')->setParameter('locale', $options['locale'])
            ->leftJoin('e.image', 'i')
            ->join('e.post', 'p')
            ->leftJoin('p.likes', 'pl')
            ->leftJoin('pl.user', 'plu')
            ->leftJoin('p.comments', 'pc')
            ->leftJoin('pc.user', 'pcu')
            ->join('p.user', 'u')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr')
            ->andWhere('e.id = :id')->setParameter('id', $id);
        if (!is_null($options['slug'])) {
            $query->andWhere('t.slug = :slug')->setParameter('slug', $options['slug']);
        }
        return $query->getQuery()->getSingleResult();
    }

    public function getNextDates($options = array())
    {
        $options = self::getOptions($options);
        
        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(d.id)')
            ->from('CMBundle:EventDate', 'd')
            ->join('d.event', 'e')
            ->join('e.post', 'p')
            ->andWhere('d.start >= :now')->setParameter('now', new \DateTime);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t, p, i')
            ->from('CMBundle:EventDate', 'd')
            ->join('d.event', 'e')
            ->leftJoin('e.translations', 't', 'with', 't.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->join('e.post', 'p')
            ->leftJoin('e.image', 'i')
            ->andWhere('d.start >= :now')->setParameter('now', new \DateTime)
            ->orderBy('d.start');
        if (!is_null($options['exclude'])) {
            $count->andWhere('d.eventId != :exclude')->setParameter('exclude', $options['exclude']);
            $query->andWhere('d.eventId != :exclude')->setParameter('exclude', $options['exclude']);
        }
        if (!is_null($options['userId'])) {
            $count->andWhere('p.userId = :user_id')->setParameter('user_id', $options['userId']);
            $query->andWhere('p.userId = :user_id')->setParameter('user_id', $options['userId']);
        }
        if (!is_null($options['pageId'])) {
            $count->andWhere('p.pageId = :page_id')->setParameter('page_id', $options['pageId']);
            $query->andWhere('p.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['groupId'])) {
            $count->andWhere('p.groupId = :group_id')->setParameter('group_id', $options['groupId']);
            $query->andWhere('p.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function countNextDates($options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('count(d.id)')
            ->from('CMBundle:EventDate', 'd')
            ->join('d.event', 'e')
            ->join('e.post', 'p')
            ->andWhere('d.start >= :now')->setParameter('now', new \DateTime)
            ->orderBy('d.start');
        if (!is_null($options['userId'])) {
            $query->andWhere('p.userId = :user_id')
                ->setParameter('user_id', $options['userId']);
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('p.pageId = :page_id')
                ->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('p.groupId = :group_id')
                ->setParameter('group_id', $options['groupId']);
        }

        return $query->getQuery()
            ->getSingleScalarResult();
    }

    public function getDatesPerEvent($id)
    {   
        return $this->getEntityManager()->createQueryBuilder()
            ->select('d')
            ->from('CMBundle:EventDate','d')
            ->where('d.eventId = :id')->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }

    public function getSponsored(array $options = array())
    {   
        $options = self::getOptions($options);
        
        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(s.id)')
            ->from('CMBundle:Sponsored','s')
            ->join('s.event', 'e')
            ->leftJoin('e.eventDates', 'd')
            ->andWhere('s.start <= :now')
            ->andWhere('s.end >= :now')
            ->andWhere('d.start >= :now')
            ->setParameter(':now', new \DateTime);
        
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('s, e, d, t, i')
            ->from('CMBundle:Sponsored', 's')
            ->join('s.event', 'e')
            ->leftJoin('e.eventDates', 'd')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.image', 'i')
            ->andWhere('s.start <= :now')
            ->andWhere('s.end >= :now')
            ->andWhere('d.start >= :now')
            ->andWhere('t.locale IN (:locales)')
            ->setParameters(array(
                ':now' => new \DateTime,
                ':locales' => $options['locales']
            ))
            ->setMaxResults($options['limit'])
            ->orderBy('s.views');
            
            return $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult());
    }

    public function getLastByVip($limit, $options = array())
    {
        $options = self::getOptions($options);
        
        return $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t, i, p, l, c, u, lu, cu, pg, gr')
            ->from('CMBundle:EventDate','d')
            ->join('d.event', 'e')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.image', 'i')
            ->innerJoin('e.post', 'p')
            ->leftJoin('e.entityUsers', 'eu', '', '', 'eu.userId')
            ->leftJoin('eu.user', 'us')
            ->leftJoin('p.likes', 'l')
            ->leftJoin('p.comments', 'c')
            ->leftJoin('p.user', 'u')
            ->leftJoin('l.user', 'lu')
            ->leftJoin('c.user', 'cu')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr')
            ->where('t.locale in (:locales)')->setParameter('locales', $options['locales'])
            ->andWhere('u.vip = '.true)
            ->andWhere('d.start >= :now')->setParameter('now', new \DateTime)
            ->orderBy('d.start')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function delete($id)
    {
        $this->createQueryBuilder('e')
            ->delete('CMBundle:Event', 'e')
            ->where('e.id = :id')->setParameter('id', $id)
            ->getQuery()->execute();
    }
}