<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
	static protected function getOptions(array $options = array())
	{
		return array_merge(array(
			'user_id'     => null,
			'group_id'    => null,
			'page_id'     => null,
			'archive'     => null, 
			'category'    => null, 
			'paginate'	  => true,
			'locale'	  => 'en',
			'locales'     => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
			'limit'       => 25,
		), $options);
	}
    
    public function getEvents(array $options = array())
    {
        $options = self::getOptions($options);

        $parameters = array(
			'now' => new \DateTime,
            'locales' => $options['locales']
        );
        
        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(d.id)')
            ->from('CMBundle:EventDate','d')
            ->setParameter(':now', new \DateTime);
        
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t, i, p, l, c, u, lu, cu')
            ->from('CMBundle:EventDate','d')
            ->join('d.event', 'e')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.images', 'i', 'WITH', 'i.main = '.true)
            ->leftJoin('e.posts', 'p', 'WITH', 'p.type = '.Post::TYPE_CREATION)
            ->leftJoin('p.likes', 'l')
            ->leftJoin('p.comments', 'c')
            ->leftJoin('p.user', 'u')
            ->leftJoin('l.user', 'lu')
            ->leftJoin('c.user', 'cu')
            ->where('t.locale in (:locales)');
        
        if (isset($options['category'])) {
            $count->join('d.event', 'e')
                ->andWhere('e.entityCategory = :category')
                ->setParameter(':category', $options['category']);
            $query->andWhere('e.entityCategory = :category');
            $parameters['category'] = $options['category'];
        }
        
        if (isset($options['archive'])) {
            $count->andWhere('d.start <= :now');
            $query->andWhere('d.start <= :now')
                ->orderBy('d.start', 'desc');    
        } else {
            $count->andWhere('d.start >= :now');
            $query->andWhere('d.start >= :now')
                ->orderBy('d.start');    
        }
        
        $query->setParameters($parameters);
        
        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }
	
	public function getEventsPerMonth($year, $month, array $options = array())
	{
		$options = self::getOptions($options);
		
		return $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t')
            ->from('CMBundle:EventDate','d')
			->join('d.event', 'e')
			->leftJoin('e.translations', 't')
			->where('SUBSTRING(d.start, 1, 4) = '.$year)
			->andWhere('SUBSTRING(d.start, 6, 2) = '.$month)
			->andWhere('t.locale IN (:locales)')->setParameter('locales', $options['locales'])
			->orderBy('d.start')
			->getQuery()
			->getResult();
	}

    public function getEvent($id, array $options = array())
    {
		$options = self::getOptions($options);
		
        return $this->createQueryBuilder('e')->select('e, t, d, i')
            ->leftJoin('e.eventDates', 'd')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.images', 'i')
            ->andWhere('e.id = :id')->setParameter('id', $id)
            ->andWhere('t.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->getQuery()
            ->getSingleResult();
    }

    public function getDate($id, array $options = array())
	{	
		$options = self::getOptions($options);
		
        return $this->getEntityManager()->createQueryBuilder()
            ->select('d, e, t, i')
            ->from('CMBundle:EventDate','d')
			->join('d.event', 'e')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.images', 'i')
            ->andWhere('d.id = :id')->setParameter('id', $id)
            ->andWhere('t.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->getQuery()
            ->getSingleResult();
    }

    public function getSponsored(array $options = array())
	{	
		$options = self::getOptions($options);
        
        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(s.id)')
            ->from('CMBundle:Sponsored','s')
			->join('s.event', 'e')
			->leftJoin('e.eventDates', 'd')
            ->andWhere('s.start <= :now')
            ->andWhere('s.end >= :now')
            ->andWhere('d.start >= :now')
            ->setParameter(':now', new \DateTime);
		
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('s, e, d, t, i')
            ->from('CMBundle:Sponsored','s')
			->join('s.event', 'e')
			->leftJoin('e.eventDates', 'd')
            ->leftJoin('e.translations', 't')
            ->leftJoin('e.images', 'i', 'WITH', 'i.main = '.true)
            ->andWhere('s.start <= :now')
            ->andWhere('s.end >= :now')
            ->andWhere('d.start >= :now')
            ->andWhere('t.locale IN (:locales)')
            ->setParameters(array(
                ':now' => new \DateTime,
                ':locales' => $options['locales']
            ))
            ->setMaxResults($options['limit'])
            ->orderBy('s.views');
            
            return $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult());
    }
}