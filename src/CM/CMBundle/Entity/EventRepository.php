<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
	static protected function getOptions(array $options = array())
	{
		return array_merge(array(
/*  		'entity_type' => sfContext::getInstance()->getRequest()->getParameter('module'),  */
			'user_id'     => null,
/* 			'category'    => sfContext::getInstance()->getRequest()->getParameter('category', null),  */
			'category'    => null, 
			'paginate'	  => true,
			'locale'	  	=> 'en',
/* 			'limit'       => 25, */
		), $options);
	}
	
	public function getEvents(array $options = array())
	{
		$options = self::getOptions($options);
		
		$postRepository = $this->getEntityManager()->getRepository('CMBundle:Post');
		
		$query = $postRepository->createQueryBuilder('p')->select('p, en, e, t, d, i')
			->leftJoin('p.event', 'e')
			->leftJoin('p.entity', 'en')
			->leftJoin('e.eventDates', 'd')
			->leftJoin('e.translations', 't')
			->leftJoin('e.images', 'i', 'WITH', 'i.main = '.true);
		
		if (isset($options['category'])) 
		{
			$query->andWhere('e.entityCategory = :category')->setParameter('category', $options['category']);	
		} 
		
		if (isset($options['archive'])) 
		{
			$query->andWhere('d.start <= :now')->orderBy('d.start', 'desc');	
		}
		else
		{
			$query->andWhere('d.start >= :now')->orderBy('d.start');	
		}			
			
		$query
			->setParameter('now', new \DateTime('now'))
			->andWhere('t.locale IN (:locale, \'en\')')->setParameter('locale', $options['locale'])
			->setMaxResults(3)->getQuery();
			
			
/*
		return new Paginator($query, $fetchJoinCollection = true);

		return $query->setMaxResults(3)->getQuery()->getResult();
*/
		
		return $options['paginate'] ? $query : $query->setMaxResults($options['limit'])->getQuery()->getResult();
	}
	
	public function getEventsPerMonth($year, $month, $options = array())
	{
		return $this->createQueryBuilder('e')->select('e, t, d, i')
			->leftJoin('e.eventDates', 'd')
			->leftJoin('e.translations', 't')
			->leftJoin('e.images', 'i', 'WITH', 'i.main = '.true)
			->where('SUBSTRING(d.start, 1, 4) = '.$year)
			->andWhere('SUBSTRING(d.start, 6, 2) = '.$month)
			->andWhere('t.locale IN (:locale, \'en\')')->setParameter('locale', $options['locale'])
			->orderBy('d.start')
			->getQuery()
			->getResult();
	}

	public function getEvent($id, $locale)
	{
		return $this->createQueryBuilder('e')->select('e, t, d, i')
			->leftJoin('e.eventDates', 'd')
			->leftJoin('e.translations', 't')
			->leftJoin('e.images', 'i')
			->andWhere('e.id = :id')->setParameter('id', $id)
			->andWhere('t.locale IN (:locale, \'en\')')->setParameter('locale', $locale)
			->getQuery()
			->getSingleResult();
	}
}
	