<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as ORMEntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends ORMEntityRepository
{
	
	static protected function getOptions(array $options = array())
	{
		return array_merge(array(
 			// 'entity_type' => sfContext::getInstance()->getRequest()->getParameter('module'), 
			'user_id'     => null,
 			// 'category'    => sfContext::getInstance()->getRequest()->getParameter('category', null), 
			'paginate'	  => true,
			'locale'	  => 'en',
			'limit'       => 25,
		), $options);
	}
	
	public function getEvents(array $options = array())
	{
		$options 	= self::getOptions($options);
		
		$query = $this->createQueryBuilder('e')->select('e, t, d')
			->leftJoin('e.event_dates', 'd')
			->leftJoin('e.translations', 't');
		
		// $now = \DateTime('@time()');
		if (isset($options['archive'])) {
			$query->where('d.start <= '.time());	
		} 
		else {
			$query->where('d.start >= '.time());	
		}			
			
		$query
			->andWhere('t.locale IN (:locale, \'en\')')->setParameter('locale', $options['locale'])
			->setMaxResults($options['limit'])
			->getQuery();
		
		
		return $options['paginate'] ? new Paginator($query, $fetchJoinCollection = true) : $query->limit($options['limit'])->getResults();
	}

	public function getEvent($id, $locale)
	{
		return $this->createQueryBuilder('e')->select('e, t, d')
			->leftJoin('e.event_dates', 'd')
			->leftJoin('e.translations', 't')
			->where('e.id = :id')->setParameter('id', $id)
			->andWhere('t.locale IN (:locale, \'en\')')->setParameter('locale', $locale)
			->getQuery()
			->getSingleResult();
	}
}
	