<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;
use Doctrine\ORM\Query;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'group_id'      => null,
            'page_id'       => null,
            'archive'       => null, 
            'paginate'      => true,
            'limit'         => 25,
            'tags'          => false
        ), $options);
    }

    public function getUserBySlug($slug, array $options = array())
    {
        $query = $this->createQueryBuilder('u')
            ->select('u'); 
                       
        if ($options['tags']) {
            $query->addSelect('uut, ut, utt')
            ->leftJoin('u.userUserTags', 'uut')
            ->leftJoin('uut.userTag', 'ut')
            ->leftJoin('ut.translations', 'utt');
        }
        
        $query->andWhere('u.usernameCanonical = :slug')->setParameter('slug', $slug);
        return $query->getQuery()->getSingleResult();
    }

    public function getAdminGroupsIds($user_id)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g.id')->from('CMBundle:Group', 'g')
            ->leftJoin('g.groupUsers', 'gu')
            ->where('gu.userId = :user_id')->setParameter('user_id', $user_id)
            ->andWhere('gu.admin = '.true)
            ->getQuery()->getArrayResult();
        return array_map('current', $query);
    }

    public function getAdminPagesIds($user_id)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p.id')->from('CMBundle:Page', 'p')
            ->leftJoin('p.pageUsers', 'pu')
            ->where('pu.userId = :user_id')->setParameter('user_id', $user_id)
            ->andWhere('pu.admin = '.true)
            ->getQuery()->getArrayResult();
        return array_map('current', $query);
    }

    public function getFromAutocomplete($fullname, $exclude = array())
    {
        $qb = $this->createQueryBuilder('u');
        return $qb->select('partial u.{id, username, usernameCanonical, firstName, lastName, img, imgOffset}')
            ->andWhere('u.id NOT IN (:exclude)')->setParameter('exclude', $exclude)
            // ->where('u.IsActive = ?', true)
            ->andWhere('u.enabled = '.true)
            ->andWhere(
                $qb->expr()->orX('CONCAT(u.firstName, CONCAT(\' \', u.lastName)) LIKE :fullname', 'CONCAT(u.lastName, CONCAT(\' \', u.firstName)) LIKE :fullname')
            )->setParameter('fullname', $fullname.'%')
            ->setMaxResults(8)
            ->orderBy('u.vip', 'DESC')
            ->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }
}
