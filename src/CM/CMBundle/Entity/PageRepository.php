<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        $options = array_merge(array(
            'locale'        => 'en'
        ), $options);

        return array_merge(array(
            'userId' => null,
            'pageId' => null,
            'tags' => false,
            'pageUsers' => false,
            'biography' => false,
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
            'paginate' => true,
            'limit'    => 25,
        ), $options);
    }

    public function getPage($id, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('p')
            ->select('p');
        if (is_string($id)) {
            $query->andWhere('p.slug = :id')->setParameter('id', $id);
        } else {
            $query->andWhere('p.id = :id')->setParameter('id', $id);
        }

        if ($options['tags']) {
            $query->addSelect('pt, t, tt')
                ->leftJoin('p.pageTags', 'pt', '', '', 'pt.order')
                ->leftJoin('pt.tag', 't')
                ->leftJoin('t.translations', 'tt', 'with', 'tt.locale = :locale')->setParameter('locale', $options['locale']);
        }
        if ($options['pageUsers']) {
            $query->addSelect('pu, puu, put, t1, tt1')
                ->join('p.pageUsers', 'pu')
                ->join('pu.user', 'puu')
                ->leftJoin('pu.pageUserTags', 'put', '', '', 'put.order')
                ->leftJoin('put.tag', 't1')
                ->leftJoin('t1.translations', 'tt1', 'with', 'tt1.locale = :locale1')->setParameter('locale1', $options['locale'])
                ->addOrderBy('puu.firstName');
        }
        if (!is_null($options['pageUser'])) {
            $query->addSelect('pu')
                ->leftJoin('p.pageUsers', 'pu', 'with', 'pu.userId = :user_id', 'pu.userId')
                ->setParameter('user_id', $options['pageUser']);
        }
        if ($options['biography']) {
            $query->addSelect('b, bt')
                ->leftJoin('p.biography', 'b')
                ->leftJoin('b.translations', 'bt', 'with', 'bt.locale in (:locales)')->setParameter('locales', $options['locales']);
        }

        return $query->getQuery()->getSingleResult();
    }

    public function getPages($options = array())
    {
        $options = self::getOptions($options);

        $count = $this->createQueryBuilder('p')
            ->select('count(p.id)')
            ->join('p.pageUsers', 'pu', '', '', 'pu.userId');
        $query = $this->createQueryBuilder('p')
            ->select('p, pu, put, t, tt')
            ->join('p.pageUsers', 'pu', '', '', 'pu.userId')
            ->leftJoin('pu.pageUserTags', 'put', '', '', 'put.order')
            ->leftJoin('put.tag', 't')
            ->leftJoin('t.translations', 'tt', 'with', 'tt.locale = :locale')->setParameter('locale', $options['locale']);

        if ($options['biography']) {
            $query->addSelect('b, bt')
                ->leftJoin('p.biography', 'b')
                ->leftJoin('b.translations', 'bt', 'with', 'bt.locale in (:locales)')->setParameter('locales', $options['locales']);
        }

        if ($options['userId']) {
            $count->andWhere('pu.userId = :user_id')->setParameter('user_id', $options['userId'])
                ->andWhere('pu.status in (:status)')
                ->setParameter('status', array(PageUser::STATUS_PENDING, PageUser::STATUS_ACTIVE, PageUser::STATUS_REQUESTED));
            $query->andWhere('pu.userId = :user_id')->setParameter('user_id', $options['userId'])
                ->andWhere('pu.status in (:status)')
                ->setParameter('status', array(PageUser::STATUS_PENDING, PageUser::STATUS_ACTIVE, PageUser::STATUS_REQUESTED));
        }

        if ($options['pageId']) {
            $query->andWhere('pu.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getAdmins($pageId, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('u, pu')
            ->from('CMBundle:User', 'u')
            ->join('u.userPages', 'pu');
        if ($options['tags']) {
            $query->addSelect('put, t, tt')
                ->leftJoin('pu.pageUserTags', 'put', '', '', 'put.order')
                ->leftJoin('put.tag', 't')
                ->leftJoin('t.translations', 'tt', 'with', 'tt.locale = :locale')->setParameter('locale', $options['locale']);
        }
        return $query->where('pu.admin = '.true)
            ->andWhere('pu.pageId = :page_id')->setParameter('page_id', $pageId)
            ->getQuery()->getResult();
    }

    public function getCreationPost($pageId, $object) {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('po, p, pu')
            ->from('CMBundle:Post', 'po')
            ->join('po.page', 'p')
            ->join('p.pageUsers', 'pu')
            ->where('p.type = '.Post::TYPE_CREATION)
            ->andWhere('p.id = :page_id')->setParameter('page_id', $pageId)
            ->getQuery()->getSingleResult();
    }

    public function getPageExcludeUsers($pageId, $excludes)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pu, put, t, tt, u')
            ->join('p.pageUsers', 'pu')
            ->leftJoin('pu.pageUserTags', 'put', '', '', 'put.order')
            ->leftJoin('put.tag', 't')
            ->leftJoin('t.translations', 'tt', 'with', 'tt.locale = :locale')->setParameter('locale', $options['locale'])
            ->join('pu.user', 'u')
            ->where('p.id = :page_id')->setParameter('page_id', $pageId)
            ->andWhere('u.id NOT IN (:excludes)')->setParameter('excludes', $excludes)
            ->getQuery()->getSingleResult();
    }

    public function filterPagesForUser($userId)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->leftJoin('p.pageUsers', 'pu')
            ->where('pu.userId = :user_id')->setParameter('user_id', $userId);
    }

    public function getPagesForUser($userId)
    {
        return $this->filterPagesForUser($userId)->getQuery()->getResult();
    }

    public function getUsersFor($pageId, $excludes = array())
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('u')
            ->from('CMBundle:User', 'u')
            ->leftJoin('u.userPages', 'ug')
            ->where('ug.page = :page_id')->setParameter('page_id', $pageId);
        if (count($excludes) > 0) {
            $query->andWhere('u.id NOT IN (:excludes)')->setParameter('excludes', $excludes);
        }
        return array_map(function ($user) { return $user['id']; }, $query->getQuery()->getResult());
    }

    public function search($q, $limit)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->orWhere('p.name LIKE :query')
            ->orWhere('p.name LIKE :Squery')
            ->setParameter('query', $q.'%')
            ->setParameter('Squery', '% '.$q.'%')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function remove($id)
    {
        return $this->createQueryBuilder('p')
            ->delete('CMBundle:Pape', 'p')
            ->where('p.id = :id')->setParameter('id', $id)
            ->petQuery()->execute();
    }
}