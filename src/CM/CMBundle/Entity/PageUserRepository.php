<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageUserRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        $options = array_merge(array(
            'locale'        => 'en'
        ), $options);

        return array_merge(array(
            'paginate'      => true,
            'limit'         => 25,
            'status' => array(PageUser::STATUS_ACTIVE),
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
        ), $options);
    }

    public function getMembers($pageId, $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('pu, put, t, tt')
            ->from('CMBundle:PageUser', 'pu', 'pu.userId')
            ->leftJoin('pu.pageUserTags', 'put', '', '', 'put.order')
            ->leftJoin('put.tag', 't')
            ->leftJoin('t.translations', 'tt', 'with', 'tt.locale = :locale')->setParameter('locale', $options['locale'])
            ->join('pu.user', 'u')
            ->join('pu.page', 'p')
            ->where('pu.status in (:status)')->setParameter('status', $options['status'])
            ->andWhere('pu.pageId = :page_id')->setParameter('page_id', $pageId)
            ->addOrderBy('u.firstName');

        return $options['paginate'] ? $query->getQuery() : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getWithPage($userId, $options = array())
    {
        $options = self::getOptions($options);
        
        $query = $this->createQueryBuilder('pu')
            ->select('pu, p, u')
            ->leftJoin('pu.user', 'u')
            ->leftJoin('pu.page', 'p')
            ->where('pu.status in (:status)')->setParameter('status', $options['status'])
            ->andWhere('pu.userId = :user_id')->setParameter('user_id', $userId)
            ->orderBy('p.name');

        return $options['paginate'] ? $query->getQuery() : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function delete($userId, $pageId)
    {
        $this->createQueryBuilder('pu')
            ->delete('CMBundle:PageUser', 'pu')
            ->where('pu.user = :user_id')->setParameter('user_id', $userId)
            ->andWhere('pu.page = :page_id')->setParameter('page_id', $pageId)
            ->getQuery()
            ->execute();
    }
}
