<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * DiscRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DiscRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        $options = array_merge(array(
            'locale'        => 'en'
        ), $options);
        
        return array_merge(array(
            'userId'       => null,
            'groupId'      => null,
            'pageId'       => null,
            'paginate'      => true,
            'categoryId' => null,
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
            'protagonists'  => false,
            'limit'         => 25,
        ), $options);
    }
    
    public function getDiscs(array $options = array())
    {
        $options = self::getOptions($options);
                 
        $count = $this->createQueryBuilder('d')
            ->select('count(d.id)')
            ->join('d.posts', 'p', 'with', 'p.type = '.Post::TYPE_CREATION.' AND p.object = :object')
            ->setParameter('object', Disc::className());

        $query = $this->createQueryBuilder('d')
            ->select('d, dt, t, i, p, l, c, u, lu, cu, pg, gr'.($options['protagonists'] ? ', eu, us' : ''))
            ->leftJoin('d.discTracks','dt')
            ->leftJoin('d.translations', 't', 'with', 't.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->setParameter('locales', $options['locales'])
            ->leftJoin('d.image', 'i')
            ->join('d.post', 'p')
            ->leftJoin('p.likes', 'l')
            ->leftJoin('p.comments', 'c')
            ->leftJoin('p.user', 'u')
            ->leftJoin('l.user', 'lu')
            ->leftJoin('c.user', 'cu')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr');
            
        if ($options['protagonists']) {
            $query->leftJoin('d.entityUsers', 'eu', 'eu.userId')
                ->leftJoin('eu.user', 'us');
        }
        
        if ($options['userId']) {
            $count->andWhere('p.userId = :user_id')->setParameter('user_id', $options['userId']);
            $query->andWhere('p.userId = :user_id')->setParameter('user_id', $options['userId']);
        }
        
        if ($options['pageId']) {
            $count->andWhere('p.pageId = :page_id')->setParameter('page_id', $options['pageId']);
            $query->andWhere('p.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        
        if ($options['groupId']) {
            $count->andWhere('p.groupId = :group_id')->setParameter('group_id', $options['groupId']);
            $query->andWhere('p.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }
        
        if ($options['categoryId']) {
            $count->andWhere('d.category = :category_id')
                ->setParameter(':category_id', $options['categoryId']);
            $query->andWhere('d.category = :category_id')
                ->setParameter(':category_id', $options['categoryId']);
        }

        $query->orderBy('p.createdAt', 'desc');
        
        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getDisc($id, array $options = array())
    {
        $options = self::getOptions($options);
        
        return $this->createQueryBuilder('d')
            ->select('d, t, ec, ect, dt, i, p, u, pg, gr')
            ->leftJoin('d.translations', 't', 'with', 't.locale IN (:locales)')->setParameter('locales', $options['locales'])
            ->leftJoin('d.category', 'ec')
            ->leftJoin('ec.translations', 'ect', 'with', 'ect.locale = :locale')->setParameter('locale', $options['locale'])
            ->leftJoin('d.discTracks', 'dt')
            ->leftJoin('d.images', 'i', 'with', 'i.main = '.true)
            ->leftJoin('d.posts', 'p', 'WITH', 'p.type = '.Post::TYPE_CREATION)
            ->leftJoin('p.user', 'u')
            ->leftJoin('p.page', 'pg')
            ->leftJoin('p.group', 'gr')
            ->andWhere('d.id = :id')->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }
}
