<?php
namespace CM\CMBundle\Entity;
use Doctrine\ORM\EntityRepository as BaseRepository;
/**
 * HomepageArchiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HomepageArchiveRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'paginate' => true,
            'limit' => null,
            'locale'        => 'en',
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
        ), $options);
    }
    
    public function filterArticles($options = array(), $count = false)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        if (!$count) {
            $query->select('a, ac, at, p, pu, aa, aac');
        } else {
            $query->select('count(a.id)');
        }

        $query->from('CMBundle:Article', 'a')
            ->leftJoin('a.entityCategory', 'ac')
            ->leftJoin('a.translations', 'at')
            ->andWhere('at.locale in (:locales)')
            ->innerJoin('a.posts', 'p', 'with', 'p.type = '.Post::TYPE_CREATION)
            ->andWhere('p.object = :article')->setParameter('article', Article::className())
            ->leftJoin('p.user', 'pu')
            ->andWhere('a.homepage = '.true)
            ->leftJoin('a.homepageArchive', 'aa')
            ->leftJoin('aa.category', 'aac')
            ->leftJoin('aac.translations', 'aact')
            ->andWhere('aact.locale in (:locales)')
            ->setParameter('locales', $options['locales']);

        return $query;
    }

    public function getArticles($options = array())
    {        
        $options = self::getOptions($options);

        $count = $this->filterArticles($options, true);

        $query = $this->filterArticles($options)
            ->orderBy('p.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getArticlesByCategory($categoryId, $options = array())
    {        
        $options = self::getOptions($options);

        $count = $this->filterArticles($options, true)
            ->andWhere('aac.id = :category_id')->setParameter('category_id', $categoryId);

        $query = $this->filterArticles($options)
            ->andWhere('aac.id = :category_id')->setParameter('category_id', $categoryId)
            ->orderBy('p.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getArticlesByPage($pageId, $options = array())
    {        
        $options = self::getOptions($options);

        $query = $this->filterArticles($options)
            ->andWhere('p.pageId = :page_id')->setParameter('page_id', $pageId)
            ->orderBy('p.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->setMaxResults($options['limit'])->getQuery()->getResult();
    }

    public function getWriters($limit = false)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('u')
            ->from('CMBundle:User', 'u')
            ->where('u.roles like :role')->setParameter('role', '%ROLE_WRITER%')
            ->getQuery()->getResult();
        // return UserQuery::create()->
        //     joinWithsfGuardUser()->
        //     usesfGuardUserQuery()->
        //         usesfGuardUserPermissionQuery()->
        //             filterByPermissionId(3)->
        //         endUse()->
        //         leftJoinWithHomepagePartnerUser()->
        //         useHomepagePartnerUserQuery()->
        //             leftJoinWithHomepagePartner()->
        //         endUse()->
        //     endUse()->
        //     withColumn('(SELECT COUNT(*) FROM homepage_archive JOIN stampa ON homepage_archive.stampa_id = stampa.id WHERE stampa.user_id = utenti.user_id)', 'nbArticles')->
        //     where('(SELECT COUNT(*) FROM homepage_archive JOIN stampa ON homepage_archive.stampa_id = stampa.id WHERE stampa.user_id = utenti.user_id) > 0')->
        //     orderBy('nbArticles', 'desc')->
        //     orderByCognome()->
        //     _if($limit)->
        //      limit($limit)->
        //     _endif()->
        //     find();
    }

    public function getNbArticlesWriters($limit = false)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('p.userId, count(a.id)')
            ->from('CMBundle:Article', 'a')
            ->where('a.homepage = '.true)
            ->innerJoin('a.posts', 'p', 'with', 'p.type = '.Post::TYPE_CREATION)
            ->andWhere('p.object = :article')->setParameter('article', Article::className())
            ->groupBy('p.userId')
            ->getQuery()->getResult();
    }


  public function init()
  {
    $query = $this->
            leftJoinWithHomepageCategory()->
            leftJoinWithStampa()->
            useStampaQuery()->
        joinWithI18n(sfContext::getInstance()->getUser()->getCulture(), Criteria::INNER_JOIN)->
                joinWithsfGuardUser()->
                joinWithUser()->
                withColumn('(SELECT COUNT(*) FROM commenti WHERE commenti.Oggetto = \'stampa\' AND commenti.Oggetto_id = Stampa.Id)', 'nbComments')->
            endUse();
        return $query;
  }
  // public static function getArticles($page = 1, $limit = 10)
  // {
  //   $query = HomepageArchiveQuery::create()->
  //           init()->
  //           orderByCreatedAt('desc');
  //       return $page != null ? $query->paginate($page, $limit) : $query->limit($limit)->find();
  // }
  public static function getArticlesPerCategory($category_id, $page = 1, $limit = 10)
  {
        $query = HomepageArchiveQuery::create()->
            init()->
            filterByCategoryId($category_id)->
            orderByCreatedAt('desc');
        return $page != null ? $query->paginate($page, $limit) : $query->limit($limit)->find();
  }
  public static function getArticlesPerPage($page_id, $page = 1, $limit = 10)
  {
        $query = HomepageArchiveQuery::create()->
            init()->
            //leftJoinWithPage()->
            useStampaQuery()->
                filterByPageId($page_id)->
            endUse()->
            orderByCreatedAt('desc');
        return $page != null ? $query->paginate($page, $limit) : $query->limit($limit)->find();
  }
  public static function getRecentArticles($limit = 10)
  {
        return HomepageArchiveQuery::create()->
            init()->
            limit($limit)->
            orderByCreatedAt('desc')->
      find();
  }
  public static function getArticle($stampa_id)
  {
        return HomepageArchiveQuery::create()->
            init()->
            useStampaQuery()->
                usesfGuardUserQuery()->
                    leftJoinWithHomepagePartnerUser()->
                    useHomepagePartnerUserQuery()->
                        leftJoinWithHomepagePartner()->
                    endUse()->
              useBiografieQuery('biografia', 'LEFT JOIN')->
                leftJoinBiografieI18n()->
                addJoinCondition('BiografieI18n', 'BiografieI18n.Culture = ?', sfContext::getInstance()->getUser()->getCulture())->
                withColumn('BiografieI18n.Estratto', 'Estratto')->
                withColumn('BiografieI18n.Biografia', 'Biografia')->
              endUse()->
                endUse()->
            endUse()->
            filterByStampaId($stampa_id)->
            orderByCreatedAt('desc')->
      findOne();
  }
  public static function getArticlesRelatedByCategory($categoria, $stampa_id, $limit = 4)
  {
    return HomepageArchiveQuery::create()->
            init()->
            useHomepageCategoryQuery()->
                filterBySlug($categoria)->
            endUse()->
            where('HomepageArchive.StampaId != ?', $stampa_id)->
            orderByCreatedAt('desc')->
      limit($limit)->
            find();
  }
  public static function getArticlesRelatedByAuthor($stampa_id, $author_id, $limit = 4)
  {
    return HomepageArchiveQuery::create()->
            init()->
            useStampaQuery()->
                filterByUserId($author_id)->
            endUse()->
            where('HomepageArchive.StampaId != ?', $stampa_id)->
            orderByCreatedAt('desc')->
      limit($limit)->
            find();
  }
}