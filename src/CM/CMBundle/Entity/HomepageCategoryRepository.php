<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * HomepageCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HomepageCategoryRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'locale'        => 'en',
            'locales'       => array_values(array_merge(array('en' => 'en'), array($options['locale'] => $options['locale']))),
        ), $options);
    }
    
    public function filterHomepageCategories(array $options = array())
    {
        $options = self::getOptions($options);
        
        return $this->createQueryBuilder('hc')
            ->select('hc, hct')
            ->leftJoin('hc.translations', 'hct')
            ->andWhere('hct.locale IN (:locale)')->setParameter('locale', $options['locale'])
            ->orderBy('hct.name', 'asc');
    }

    public function getCategories($rubric = true, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('c')
            ->select('c, ct')
            ->leftJoin('c.translations', 'ct')
            ->andWhere('ct.locale in (:locales)')->setParameter('locales', $options['locales']);
        if (!$rubric) {
            $query->andWhere('c.rubric = :rubric')->setParameter('rubric', $rubric);
        }
        return $query->getQuery()->getResult();
    } 
     
    public function getCategory($slug, $options = array())
    {
        $options = self::getOptions($options);

        return $this->createQueryBuilder('c')
            ->select('c, ct')
            ->leftJoin('c.translations', 'ct')
            ->where('ct.locale in (:locales)')->setParameter('locales', $options['locales'])
            ->andWhere('ct.slug = :slug')->setParameter('slug', $slug)
            ->getQuery()->getSingleResult();
    }        
     
    public function getRubrics($options)
    {
        $options = self::getOptions($options);

        return $this->createQueryBuilder('c')
            ->select('c, ct')
            ->leftJoin('c.translations', 'ct')
            ->where('ct.locale in (:locales)')->setParameter('locales', $options['locales'])
            ->where('c.rubric = '.true)
            ->getQuery()->getResult();
    }
}
