<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageThreadRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'userId' => null,
            'pageId' => null,
            'groupId' => null,
            'paginate' => true,
            'limit' => null
        ), $options);
    }

    public function getActiveThreads($options = array())
    {
        $options = self::getOptions($options);

        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(m.id)')
            ->from('CMBundle:Message', 'm')
            ->innerJoin('m.metadata', 'mm')
            ->leftJoin('m.sender', 'ms')
            ->leftJoin('mm.participant', 'mp')
            ->join('m.thread', 't')
            ->innerJoin('t.metadata', 'tm')
            ->leftJoin('tm.participant', 'tp')
            ->where('tm.participantId = :user_id')
            ->andWhere('mm.participantId = :user_id')
            ->setParameter('user_id', $options['userId']);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('distinct(m), mm, ms, mp, t, tm, tp')
            ->from('CMBundle:Message', 'm')
            ->innerJoin('m.metadata', 'mm')
            ->leftJoin('m.sender', 'ms')
            ->leftJoin('mm.participant', 'mp')
            ->join('m.thread', 't')
            ->innerJoin('t.metadata', 'tm')
            ->leftJoin('tm.participant', 'tp')
            ->where('tm.participantId = :user_id')
            ->andWhere('mm.participantId = :user_id')
            ->setParameter('user_id', $options['userId']);

        $query->orderBy('t.createdAt', 'desc');

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->getQuery()->getResult();
    }

    public function getLink($id, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->createQueryBuilder('m')
            ->select('m, p, c, cu, l, lu')
            ->leftJoin('m.posts', 'p', 'with', 'p.type = '.Post::TYPE_CREATION)
            ->leftJoin('p.comments', 'c')
            ->leftJoin('c.user', 'cu')
            ->leftJoin('p.likes', 'l')
            ->leftJoin('l.user', 'lu')
            ->where('m.id = :id')->setParameter('id', $id);

        if (!is_null($options['userId'])) {
            $query->andWhere('p.userId = :user_id')->setParameter('user_id', $options['userId'])
                ->andWhere('p.pageId is NULL')
                ->andWhere('p.groupId is NULL');
        }
        if (!is_null($options['pageId'])) {
            $query->andWhere('p.pageId = :page_id')->setParameter('page_id', $options['pageId']);
        }
        if (!is_null($options['groupId'])) {
            $query->andWhere('p.groupId = :group_id')->setParameter('group_id', $options['groupId']);
        }

        $link = $query->setMaxResults(1)->getQuery()->getResult();
        if (is_array($link) && count($link) > 0) {
            $link = $link[0];
        } else {
            $link = null;
        }
        return $link;
    }
}
