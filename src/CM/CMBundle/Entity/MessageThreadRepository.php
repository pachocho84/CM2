<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageThreadRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'userId' => null,
            'pageId' => null,
            'groupId' => null,
            'threadIds' => array(),
            'paginate' => true,
            'limit' => null
        ), $options);
    }

    public function getActiveThreads($options = array())
    {
        $options = self::getOptions($options);

        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(m.id)')
            ->from('CMBundle:Message', 'm')
            ->join('m.metadata', 'mm', 'with', 'mm.participantId = :user_id')
            ->join('m.thread', 't')
            ->join('t.metadata', 'tm', 'with', 'tm.participantId = :user_id')
            ->setParameter('user_id', $options['userId']);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('m, mm, ms, mp, t, tm_, tp')
            ->from('CMBundle:Message', 'm')
            ->join('m.metadata', 'mm', 'with', 'mm.participantId = :user_id')
            ->join('m.sender', 'ms')
            ->join('mm.participant', 'mp')
            ->join('m.thread', 't')
            ->join('t.metadata', 'tm', 'with', 'tm.participantId = :user_id')
            ->leftJoin('t.metadata', 'tm_')
            ->join('tm_.participant', 'tp')
            ->where('m.createdAt = (select max(m1.createdAt) from CMBundle:Message m1 join m1.metadata mm1 with mm1.participantId = :user_id join m1.thread t1 join t1.metadata tm1 with tm1.participantId = :user_id where t1.id = m.threadId order by m1.id desc)')
            ->setParameter('user_id', $options['userId']);

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->getQuery()->getResult();
    }

    public function getThread($threadId, $options = array())
    {
        $options = self::getOptions($options);

        $count = $this->getEntityManager()->createQueryBuilder()
            ->select('count(m.id)')
            ->from('CMBundle:Message', 'm')
            ->join('m.metadata', 'mm', 'with', 'mm.participantId = :user_id')
            ->join('m.thread', 't', 'with', 't.id = :thread_id')
            ->join('t.metadata', 'tm', 'with', 'tm.participantId = :user_id')
            ->join('tm.participant', 'tp')
            ->setParameter('user_id', $options['userId'])
            ->setParameter('thread_id', $threadId);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('m, mm, ms, mp, t, tm_, tp')
            ->from('CMBundle:Message', 'm')
            ->join('m.metadata', 'mm')
            ->join('m.sender', 'ms')
            ->join('mm.participant', 'mp', 'with', 'mm.participantId = :user_id')
            ->join('m.thread', 't', 'with', 't.id = :thread_id')
            ->join('t.metadata', 'tm', 'with', 'tm.participantId = :user_id')
            ->leftJoin('t.metadata', 'tm_')
            ->join('tm_.participant', 'tp')
            ->orderBy('m.createdAt', 'desc')
            ->setParameter('user_id', $options['userId'])
            ->setParameter('thread_id', $threadId);

        return $options['paginate'] ? $query->getQuery()->setHint('knp_paginator.count', $count->getQuery()->getSingleScalarResult()) : $query->getQuery()->getResult();
    }

    public function countNew($userId)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('count(m.id)')
            ->from('CMBundle:Message', 'm')
            ->join('m.metadata', 'mm', 'with', 'mm.participantId = :user_id and mm.status = '.MessageMetadata::STATUS_NEW)
            ->andWhere('m.senderId != :user_id')
            ->setParameter('user_id', $userId)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function setUnread($userId)
    {
        $this->getEntityManager()->createQueryBuilder()
            ->update('CMBundle:MessageMetadata', 'mm')
            ->where('mm.participantId = :user_id')
            ->setParameter('user_id', $userId)
            ->andWhere('mm.status = '.MessageMetadata::STATUS_NEW)
            ->set('mm.status', MessageMetadata::STATUS_UNREAD)
            ->getQuery()
            ->execute();
    }

    public function setRead($threadId, $userId)
    {
        $this->getEntityManager()->createQueryBuilder()
            ->update('CMBundle:MessageMetadata', 'mm')
            ->where('mm.participantId = :user_id')
            ->andWhere('mm.messageId in (select m.id from CMBundle:Message m where m.threadId = :thread_id)')
            ->setParameter('thread_id', $threadId)
            ->setParameter('user_id', $userId)
            ->set('mm.status', MessageMetadata::STATUS_ACTIVE)
            ->getQuery()
            ->execute();
    }

    public function deleteFromMessage($messageId, $userId)
    {
        $this->getEntityManager()->createQueryBuilder()
            ->delete('CMBundle:MessageMetadata', 'mm')
            ->where('mm.participantId = :user_id')
            ->andWhere('mm.messageId = :message_id')
            ->setParameter('message_id', $messageId)
            ->setParameter('user_id', $userId)
            ->getQuery()
            ->execute();
    }

    public function deleteFromThread($threadId, $userId)
    {
        $this->getEntityManager()->createQueryBuilder()
            ->delete('CMBundle:MessageMetadata', 'mm')
            ->where('mm.participantId = :user_id')
            ->andWhere('mm.messageId = (select m.id from CMBundle:Message m where m.threadId = :thread_id)')
            ->setParameter('thread_id', $threadId)
            ->setParameter('user_id', $userId)
            ->getQuery()
            ->execute();

        $this->getEntityManager()->createQueryBuilder()
            ->delete('CMBundle:MessageThreadMetadata', 'mt')
            ->where('mt.participantId = :user_id')
            ->andWhere('mt.threadId = :thread_id')
            ->setParameter('thread_id', $threadId)
            ->setParameter('user_id', $userId)
            ->getQuery()
            ->execute();
    }
}
