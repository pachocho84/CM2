<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * RelationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelationRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'indexBy' => null
        ), $options);
    }
    public function getRelationTypesBetweenUsers($user1Id, $user2Id)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('rt, r')
            ->from('CMBundle:RelationType', 'rt')
            ->leftJoin('rt.relations', 'r', 'with', '(r.userId = :user_1_id AND r.fromUserId = :user_2_id) OR (r.userId = :user_2_id AND r.fromUserId = :user_1_id)')
            ->setParameter('user_1_id', $user1Id)
            ->setParameter('user_2_id', $user2Id)
            ->orderBy('rt.id')
            ->getQuery()->getResult();
    }

    public function getRelationTypesPerUser($userId, $accepted, $exclude = false)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('rt')
            ->from('CMBundle:RelationType', 'rt')
            ->leftJoin('rt.relations', 'r', 'with', 'r.userId = :user_id and r.accepted '.($exclude ? '!=' : '=').' :accepted')
            ->setParameter('user_id', $userId)
            ->setParameter('accepted', $accepted)
            ->orderBy('rt.id')
            ->getQuery()
            ->getResult();
    }
    
    public function getRelations($user1Id, $user2Id, $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from($this->_entityName, 'r', is_null($options['indexBy']) ? null : 'r.'.$options['indexBy']);
        $query->andWhere($query->expr()->orX(
                $query->expr()->andX(
                    $query->expr()->eq('r.userId', ':user_1_id'),
                    $query->expr()->eq('r.fromUserId', ':user_2_id')
                ),
                $query->expr()->andX(
                    $query->expr()->eq('r.userId', ':user_2_id'),
                    $query->expr()->eq('r.fromUserId', ':user_1_id')
                )
            ))->setParameter('user_1_id', $user1Id)->setParameter('user_2_id', $user2Id);
        return $query->getQuery()->getResult();
    }

    public function countBy($options = array())
    {
        $query = $this->createQueryBuilder('r')
            ->select('count(r.id)');
        foreach ($options as $field => $option) {
            $query->andWhere('r.'.$field.' = :'.$field)
                ->setParameter($field, $option);
        }
        return $query->getQuery()->getSingleScalarResult();
    }

    // public function getUserRelations($userId)
    // {
    //     return $this->createQueryBuilder('r')
    //         ->select('r, t, u, fu')
    //         ->leftJoin('r.relationType', 't')
    //         ->leftJoin('r.user', 'u')
    //         ->leftJoin('r.fromUser', 'fu')
    //         ->where('r.fromUserId = :from_user_id')->setParameter('from_user_id', $userId)
    //         ->orWhere('r.userId = :user_id')->setParameter('user_id', $userId)
    //         ->getQuery()->getResult();
    // }

    public function getRelationsPerUser($userId, $accepted, $exclude = false)
    {
        return $this->createQueryBuilder('r')
            ->select('r, rt, u')
            ->leftJoin('r.relationType', 'rt')
            ->leftJoin('r.fromUser', 'u')
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $userId)
            ->andWhere('r.accepted '.($exclude ? '!=' : '=').' :accepted')->setParameter('accepted', $accepted)
            ->orderBy('r.createdAt', 'desc')
            ->groupBy('r.relationTypeId')
            ->getQuery()->getResult();
    }

    public function getInverse($relationTypeId, $userId, $fromUserId)
    {
        return $this->createQueryBuilder('r')
            ->select('r, t')
            ->leftJoin('r.relationType', 't', 'with', 't.id = :relation_type_id')->setParameter('relation_type_id', $relationTypeId)
            ->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $userId)
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $fromUserId)
            ->getQuery()->getSingleResult();
    }

    public function updateInverse($relationTypeId, $userId, $fromUserId, $accepted)
    {
        return $this->createQueryBuilder('r')
            ->update('CMBundle:Relation', 'r')
            ->andWhere('r.relationType = :relation_type_id')->setParameter('relation_type_id', $relationTypeId)
            ->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $userId)
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $fromUserId)
            ->set('r.accepted', $accepted)
            ->getQuery()->getSingleResult();
    }

    public function remove($relationTypeId, $userId, $fromUserId)
    {
        $this->createQueryBuilder('r')
            ->delete('CMBundle:Relation', 'r')
            ->where('r.relationTypeId = :relation_type_id')->setParameter('relation_type_id', $relationTypeId)
            ->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $fromUserId)
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $userId)
            ->getQuery()->execute();
    }
}
