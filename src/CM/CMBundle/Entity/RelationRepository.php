<?php

namespace CM\CMBundle\Entity;

use Doctrine\ORM\EntityRepository as BaseRepository;

/**
 * RelationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelationRepository extends BaseRepository
{
    static protected function getOptions(array $options = array())
    {
        return array_merge(array(
            'indexBy' => null
        ), $options);
    }
    
    public function getRelations($fields = array(), $options = array())
    {
        $options = self::getOptions($options);

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('r')
            ->from($this->_entityName, 'r', is_null($options['indexBy']) ? null : 'r.'.$options['indexBy']);
        foreach ($fields as $field => $value) {
            $query->andWhere('r.'.$field.' = :field_'.$field)
                ->setParameter('field_'.$field, $value);
        }
        return $query->getQuery()->getResult();
    }

    public function getUserRelations($userId)
    {
        return $this->createQueryBuilder('r')
            ->select('r, t, u, fu')
            ->leftJoin('r.relationType', 't')
            ->leftJoin('r.user', 'u')
            ->leftJoin('r.fromUser', 'fu')
            ->where('r.fromUserId = :from_user_id')->setParameter('from_user_id', $userId)
            ->orWhere('r.userId = :user_id')->setParameter('user_id', $userId)
            ->getQuery()->getResult();
    }

    public function getInverse($relationType, $userId, $fromUserId)
    {
        return $this->createQueryBuilder('r')
            ->select('r, t')
            ->leftJoin('r.relationType', 't', 'with', 't.id = :relation_type_id')->setParameter('relation_type_id', $relationType->getInverseTypeId())
            ->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $userId)
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $fromUserId)
            ->getQuery()->getSingleResult();
    }

    public function remove($relationType, $userId, $fromUserId)
    {
        $this->createQueryBuilder('r')
            ->delete('CMBundle:Relation', 'r')
            ->where('r.relationTypeId = :relation_type_id')->setParameter('relation_type_id', $relationType)
            ->andWhere('r.fromUserId = :from_user_id')->setParameter('from_user_id', $fromUserId)
            ->andWhere('r.userId = :user_id')->setParameter('user_id', $userId)
            ->getQuery()->execute();
    }
}
